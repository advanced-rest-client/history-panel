/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   history-panel.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

declare namespace UiElements {

  /**
   * History panel screen for Advanced REST Client.
   *
   * ### Styling
   * `<history-panel>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--history-panel` | Mixin applied to the element | `{}`
   * `--arc-font-headline` | Mixin applied to the header | `{}`
   * `--arc-font-subhead` | Mixin applied to the subheader | `{}`
   * `--history-panel-loader` | Mixin applied to the loader element | `{}`
   * `--history-panel-list` | Mixin apllied to the list element | `{}`
   * `--history-panel-toast-revert-button` | Mixin appllied to the rever button | `{}`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   * `--empty-info` | Mixin applied to the label rendered when no data is available. | `{}`
   * `--history-panel-fab-background-color` | Bg color of fab button | `--primary-color`
   * `--history-panel-bottom-sheet` | Mixin apllied to the `<bottom-sheet>` elements | `{}`
   * `--context-menu-item-color` | Color of the dropdown menu items | ``
   * `--context-menu-item-background-color` | Background olor of the dropdown menu items | ``
   * `--context-menu-item-color-hover` | Color of the dropdown menu items when hovering | ``
   * `--context-menu-item-background-color-hover` | Background olor of the dropdown menu items when hovering | ``
   * `--bottom-sheet-width` | Width of the `<bottom-sheet>` element | `100%`
   * `--bottom-sheet-max-width` | Max width of the `<bottom-sheet>` element | `700px`
   * `--history-panel-bottom-sheet-right` | Right position of the `<bottom-sheet>` element | `40px`
   * `--history-panel-bottom-sheet-left` | Left position of the `<bottom-sheet>` element | `auto`
   */
  class HistoryPanel extends
    RequestsListMixin(
    HistoryListMixin(
    Object)) {

    /**
     * List of requests that has been recently removed
     */
    _latestDeleted: any[]|null|undefined;

    /**
     * Computed value, true if the requests lists is hidden.
     */
    readonly listHidden: boolean|null|undefined;

    /**
     * Selected items list.
     */
    selectedItems: Array<object|null>|null;

    /**
     * Computed value, true when the user made a selection on the list.
     */
    readonly hasSelection: boolean|null|undefined;

    /**
     * When true the editor panel is rendered
     */
    editorOpened: boolean|null|undefined;

    /**
     * When true the details panel is rendered
     */
    detailsOpened: boolean|null|undefined;

    /**
     * Passed to the request editor
     */
    noAutoProjects: boolean|null|undefined;

    /**
     * Enables the comonent to accept drop action with a request.
     */
    draggableEnabled: boolean|null|undefined;

    /**
     * Indicates that the export options panel is currently rendered.
     */
    _exportOptionsOpened: boolean|null|undefined;
    _exportOptions: object|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Notifies the list that the resize event occurred.
     * Should be called whhen content of the list changed but the list wasn't
     * visible at the time.
     */
    notifyResize(): void;

    /**
     * Computes value of the `listHidden` property.
     * List is hidden when no requests are found and it is not searching.
     */
    _computeListHidden(hasRequests: Boolean|null, isSearch: Boolean|null): Boolean|null;

    /**
     * Handler for navigate action from the list
     */
    _navigateHandler(): void;

    /**
     * Handles items delete event from item click.
     */
    _deleteSelected(): Promise<any>|null;

    /**
     * Deletes a request from the details panel.
     */
    _deleteRequestDetails(): Promise<any>|null;

    /**
     * Performs a delete action of request items.
     *
     * @param deleted List of deleted items.
     * @returns [description]
     */
    _delete(deleted: Array<object|null>|null): any;

    /**
     * Dispatches `request-objects-deleted` event.
     *
     * @param deleted List of requests to delete.
     */
    _dispatchDelete(deleted: Array<object|null>|null): CustomEvent|null;

    /**
     * Restores removed requests.
     * It does nothing if `_latestDeleted` is not set or empty.
     *
     * @returns A promise resolved when objects were restored
     */
    revertDeleted(): Promise<any>|null;

    /**
     * Dispatches `request-objects-undeleted` event.
     *
     * @param items List of deleted requests. The list
     * contains objects with `_id` and `_rev` properties.
     */
    _dispatchUndelete(items: Array<object|null>|null): CustomEvent|null;

    /**
     * Forces selection menu to close.
     */
    _closeSelectionMenu(): void;

    /**
     * Forces main menu to close.
     */
    _closeMainMenu(): void;

    /**
     * Toggles export options panel and sets export items to all currently loaded requests.
     */
    openExportAll(): void;
    _cancelExportOptions(): void;

    /**
     * Creates export file for all items.
     *
     * @returns Result of calling `_doExportItems()`
     */
    _exportAllFile(): Promise<any>|null;

    /**
     * Handler for `accept` event dispatched by export options element.
     *
     * @returns Result of calling `_doExportItems()`
     */
    _acceptExportOptions(e: CustomEvent|null): Promise<any>|null;

    /**
     * Calls `_dispatchExportData()` from requests lists mixin with
     * prepared arguments
     *
     * @param requests List of request to export with the project.
     * @param detail Export configuration
     */
    _doExportItems(requests: Array<object|null>|null, detail: String|null): Promise<any>|null;
    _onExportSelected(): void;

    /**
     * Opens the request details applet with the request.
     */
    _onDetails(e: CustomEvent|null): void;

    /**
     * Fires `navigate` event for currently loaded in the details request.
     */
    _loadRequestDetails(): void;

    /**
     * Handler for the `search` event on the search input.
     * Calls `query()` with input's value as argument.
     */
    _searchHandler(e: Event|null): void;

    /**
     * Handler for delete all menu option click.
     */
    _deleteAllClick(): void;

    /**
     * Called when delete datastore dialog is closed.
     */
    _onClearDialogResult(e: CustomEvent|null): void;

    /**
     * Removes all data from the datastore and then fires
     */
    _clearDatastore(): void;

    /**
     * Dispatches `destroy-model` with `saved` on the models list.
     */
    _dispatchDeleteModel(): CustomEvent|null;

    /**
     * Opens request details editor in place of the request details applet.
     */
    _editRequestDetails(): void;

    /**
     * Resizes `bottom-sheet` content by calling `notifyResize()` on each content panel.
     */
    _resizeSheetContent(e: CustomEvent|null): void;
    _cancelRequestEdit(): void;

    /**
     * Handler fro save request event from the editor.
     */
    _saveRequestEdit(): void;

    /**
     * Checks if selection has items.
     *
     * @param length Current size of selection
     * @returns True if there is a selection.
     */
    _computeHasSelection(length: Number|null): Boolean|null;

    /**
     * Updates icon size CSS variable and notifies resize on the list when
     * list type changes.
     */
    _updateListStyles(type: String|null): void;

    /**
     * Generates file name for the export options panel.
     */
    _generateFileName(): String|null;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "history-panel": UiElements.HistoryPanel;
  }
}

export {};
