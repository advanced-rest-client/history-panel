/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   history-panel.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../iron-icon/iron-icon.d.ts" />
/// <reference path="../arc-icons/arc-icons.d.ts" />
/// <reference path="../paper-menu-button/paper-menu-button.d.ts" />
/// <reference path="../paper-icon-button/paper-icon-button.d.ts" />
/// <reference path="../paper-listbox/paper-listbox.d.ts" />
/// <reference path="../paper-item/paper-icon-item.d.ts" />
/// <reference path="../paper-progress/paper-progress.d.ts" />
/// <reference path="../paper-toast/paper-toast.d.ts" />
/// <reference path="../paper-dialog/paper-dialog.d.ts" />
/// <reference path="../bottom-sheet/bottom-sheet.d.ts" />
/// <reference path="../saved-request-detail/saved-request-detail.d.ts" />
/// <reference path="../saved-request-editor/saved-request-editor.d.ts" />
/// <reference path="../requests-list-mixin/requests-list-mixin.d.ts" />
/// <reference path="../paper-fab/paper-fab.d.ts" />
/// <reference path="../paper-input/paper-input.d.ts" />
/// <reference path="history-panel-list.d.ts" />

declare namespace UiElements {

  /**
   * ARC's requests history view
   *
   * Contains complete UI to support saved requests view.
   * It needs the following components to be present in the DOM to support full
   * functionality:
   *
   * -   arc-data-export - to prepare export object
   * -   chrome-file-export or any other file export element to save file to disk
   *
   * ### Example
   *
   * ```
   * <history-panel></history-panel>
   * ```
   *
   * ### Styling
   * `<history-panel>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--history-panel` | Mixin applied to the element | `{}`
   * `--arc-font-headline` | Mixin applied to the header | `{}`
   * `--arc-font-subhead` | Mixin applied to the subheader | `{}`
   * `--history-panel-loader` | Mixin applied to the loader element | `{}`
   * `--history-panel-list` | Mixin apllied to the list element | `{}`
   * `--history-panel-toast-revert-button` | Mixin appllied to the rever button in the data delete confirmation toast | `{}`
   * `--warning-primary-color` | Main color of the warning messages | `#FF7043`
   * `--warning-contrast-color` | Contrast color for the warning color | `#fff`
   * `--error-toast` | Mixin applied to the error toast | `{}`
   * `--empty-info` | Mixin applied to the label rendered when no data is available. | `{}`
   * `--history-panel-fab-background-color` | Color of the fab button in the details panel | `--primary-color`
   * `--history-panel-bottom-sheet` | Mixin apllied to the `<bottom-sheet>` elements | `{}`
   *
   * History panel screen for Advanced REST Client.
   */
  class HistoryPanel extends
    ArcComponents.RequestsListMixin(
    Object) {

    /**
     *  Returns a handler to the datastore instance
     */
    readonly _db: any;

    /**
     * True when the element is querying the database for the data.
     */
    readonly querying: boolean|null|undefined;

    /**
     * Database query options for pagination.
     * Override this value to change the query options like limit of the results in one call.
     *
     * This is query options passed to the PouchDB `allDocs` function. Note that it will not
     * set `include_docs` option. A conviniet shortcut is to set the the `includeDocs` property
     * and the directive will be added automatically.
     */
    readonly queryOptions: object|null|undefined;

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;

    /**
     * List of requests that has been recently removed
     */
    _latestDeleted: any[]|null|undefined;

    /**
     * Current search query.
     */
    isSearch: boolean|null|undefined;

    /**
     * Computed value, true if the requests lists is hidden.
     */
    readonly listHidden: boolean|null|undefined;

    /**
     * Computed value. True when the query has been performed and no items
     * has been returned. It is different from `listHidden` where less
     * conditions has to be checked. It is set to true when it doesn't
     * have items, is not loading and is search.
     */
    readonly searchListEmpty: boolean|null|undefined;

    /**
     * Selected items list.
     */
    selectedItems: Array<object|null>|null;
    readonly hasSelection: boolean|null|undefined;
    editorOpened: boolean|null|undefined;
    detailsOpened: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Handler for the `datastore-destroyed` custom event
     */
    _onDatabaseDestroy(e: any): void;
    _resetHandler(): void;

    /**
     * Shortcut to `reset()` to be compatible with `history-menu` API.
     */
    refresh(): void;

    /**
     * Resets the state of the variables.
     */
    reset(): void;

    /**
     * Loads next page of results. It runs the task in a debouncer set
     * to 10 miliseconds.
     */
    loadNext(): void;

    /**
     * Loads next page of results from the datastore.
     * Pagination used here has been described in PouchDB pagination strategies
     * document.
     */
    _loadPage(): Promise<any>|null;

    /**
     * Notifies the list that the resize event occurred.
     * Should be called whhen content of the list changed but the list wasn't
     * visible at the time.
     */
    notifyResize(): void;

    /**
     * Appends array items to the `items` property. It should be used instead of
     * direct manipulation of the `items` array.
     *
     * @param requests [description]
     */
    _appendItems(requests: any): void;

    /**
     * Computes value of the `listHidden` property.
     * List is hidden when no requests are found and it is not searching.
     */
    _computeListHidden(hasRequests: Boolean|null, isSearch: Boolean|null): Boolean|null;

    /**
     * Computes value for the `searchListEmpty` property
     */
    _computeSearchListEmpty(hasRequests: any, loading: any, isSearch: any): any;

    /**
     * Computes value for the `dataUnavailable` proeprty
     */
    _computeDataUnavailable(hasRequests: any, loading: any, isSearch: any): any;
    _handleError(cause: any): void;

    /**
     * Handler for navigate action from the list
     */
    _navigateHandler(): void;

    /**
     * Handles items delete event.
     */
    _deleteSelected(): any;

    /**
     * Deletes a request from the details panel.
     */
    _deleteRequestDetails(): any;

    /**
     * Performs a delete action of request items.
     *
     * @param deleted List of deleted items.
     * @returns [description]
     */
    _delete(deleted: Array<object|null>|null): any;

    /**
     * Restores removed requests.
     * It does nothing if `_latestDeleted` is not set or empty.
     *
     * @returns A promise resolved when objects were restored
     */
    revertDeleted(): Promise<any>|null;
    _closeSelectionMenu(): void;
    _exportSelected(): void;
    _exportSelectedDrive(): void;
    _closeMainMenu(): void;

    /**
     * Menu item handler to export all project data to Drive
     */
    _onExportAllDrive(): void;

    /**
     * Menu item handler to export all project data to file
     */
    _onExportAll(): void;

    /**
     * Menu item handler to export all project data
     */
    _exportAll(destination: any): void;

    /**
     * Dispatches the `export-project` event with relevant data.
     */
    _exportItems(destination: String|null): void;

    /**
     * Opens the request details applet with the request.
     */
    _onDetails(e: CustomEvent|null): void;

    /**
     * Fires `navigate` event for currently loaded in the details request.
     */
    _loadRequestDetails(): void;
    _searchHandler(e: any): void;

    /**
     * Performs a query on a saved items. The query is performewd on two stages.
     * First stage searches through the meta properties saved in the object's
     * `_id` property (url, method). This query is fast and
     * reports results almost immidietly. Second stage is to perform full text
     * search on the items. This required building an index and then performing
     * the search so it may take a long time in cases of lots of data stored
     * in the datastore.
     *
     * @param query The query to performs. Pass empty stirng
     * (or nothing) to reset quesy state.
     * @returns Resolved promise when the query ends.
     */
    query(query: String|null): Promise<any>|null;

    /**
     * Handler for delete all menu option click.
     */
    _deleteAllClick(): void;

    /**
     * Called when delete datastore dialog is closed.
     */
    _onClearDialogResult(e: CustomEvent|null): void;

    /**
     * Removes all data from the datastore and then fires
     */
    _clearDatastore(): void;

    /**
     * Opens request details editor in place of the request details applet.
     */
    _editRequestDetails(): void;
    _resetHistoryObject(request: any): any;
    _resizeSheetContent(e: any): void;
    _cancelRequestEdit(): void;

    /**
     * Handler fro save request event from the editor.
     */
    _saveRequestEdit(): void;
    _computeHasSelection(length: any): any;
  }
}

interface HTMLElementTagNameMap {
  "history-panel": UiElements.HistoryPanel;
}
